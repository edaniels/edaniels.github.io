<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eric Daniels - Software Engineer</title>
    <generator uri="https://gohugo.io/">Hugo</generator>
    <link>https://erdaniels.com/blog/index.xml</link>
    <language>en-us</language>
    <author>Eric Daniels</author>
    
      <copyright>2015 Eric Daniels</copyright>
    
    <updated>Sun, 31 May 2015 15:53:52 EDT</updated>
    
      
        <item>
          <title>Debugging/Fixing a Third-Party Go Package Bug</title>
          <link>https://erdaniels.com/2015/05/fixing-debugging-golang-package-bug/</link>
          <pubDate>Sun, 31 May 2015 15:53:52 EDT</pubDate>
          <author>Eric Daniels</author>
          <guid>https://erdaniels.com/2015/05/fixing-debugging-golang-package-bug/</guid>
          <description>&lt;p&gt;Text Yo Hey MongoDB&amp;rsquo;s product, MMS, uses Go for all of the agents that run on MMS (Monitoring, Backup, Automation) as well as for some small utilities. All of these binaries use the &lt;a href=&#34;https://github.com/winlabs/gowin32&#34;&gt;gowin32&lt;/a&gt; package in some form or another. I have recently begun working on a feature in the Automation agent that requires gowin32 and I noticed when writing code like the following that my binary would crash:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	_ &amp;quot;github.com/winlabs/gowin32&amp;quot;
)

func main() {
	_ = 0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The fatal error that occurred was:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;runtime: garbage collector found invalid heap pointer *(0x68e60+0x0)=0x1 s=nil
fatal error: invalid heap pointer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On the other hand, adding a print statement suppressed the crashing behavior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	_ &amp;quot;github.com/winlabs/gowin32&amp;quot;
)

func main() {
	_ = 0
	fmt.Println(&amp;quot;Stop crashing&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding the &lt;code&gt;Println&lt;/code&gt; was essentially a red herring and threw me off for a bit. This was the first time that I encountered an issue like this in Go and as such I didn&amp;rsquo;t apply much common sense as to what that error message meant.&lt;/p&gt;

&lt;p&gt;A key hint as to what&amp;rsquo;s going on here is the fact that I was using Go 1.4. All of the agent code is currently using Go 1.3 and the error never occurred there.&lt;/p&gt;

&lt;h2 id=&#34;the-poor-man-s-debugger&#34;&gt;The Poor Man&amp;rsquo;s Debugger&lt;/h2&gt;

&lt;p&gt;My first thought was that if I&amp;rsquo;m importing a package and it crashes without actually using anything from it, then there must be some kind of &lt;code&gt;init()&lt;/code&gt; or side-effect that causes the invalid heap pointer. Of course gowin32 has no &lt;code&gt;init()&lt;/code&gt;s but it has global (package-scoped) variables all over the place. The problem was finding out which &lt;code&gt;var&lt;/code&gt; was screwing me over.&lt;/p&gt;

&lt;p&gt;The best idea I could think of at the time was to simply start deleting source files until the crash disappeared. It took a while to find it, but &lt;em&gt;winuser.go&lt;/em&gt; was the culprit. Thankfully it was a small file and the global variables were causing the crash.&lt;/p&gt;

&lt;h2 id=&#34;realizing-the-bug&#34;&gt;Realizing the Bug&lt;/h2&gt;

&lt;p&gt;According to the Go 1.4 &lt;a href=&#34;https://golang.org/doc/go1.4&#34;&gt;release notes&lt;/a&gt;, as of Go 1.3, the runtime is supposed to crash when it finds a memory word that should hold a valid pointer within the Go runtime. This means that a value like 7 in a &lt;code&gt;*uint16&lt;/code&gt; should crash the runtime. Looking at &lt;code&gt;MAKEINTRESOURCE&lt;/code&gt; in &lt;em&gt;winuser.go&lt;/em&gt;, it was taking a &lt;code&gt;uint16&lt;/code&gt; and literally converting it into a &lt;code&gt;*uint16&lt;/code&gt;. The Windows predefined RT_* resources range from 1-24 which clearly would count as invalid pointers. But why did this work in Go 1.3 if the runtime should crash during garbage collection? It turns out the garbage collector in Go 1.3 ignored invalid pointers that are located on the heap (see &lt;a href=&#34;https://github.com/golang/go/issues/9454#issuecomment-68169315&#34;&gt;https://github.com/golang/go/issues/9454#issuecomment-68169315&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;reproducing-the-bug&#34;&gt;Reproducing the Bug&lt;/h2&gt;

&lt;p&gt;After realizing what was going on, I just wanted to prove I was right. Coming up with the following reproduction was simple and nice to explain:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;runtime&amp;quot;
    &amp;quot;unsafe&amp;quot;
)

func MAKEINTRESOURCE(integer uint16) *uint8 {
    return (*uint8)(unsafe.Pointer(uintptr(integer)))
}

var (
    test1 = MAKEINTRESOURCE(1)
)

func main() {
    runtime.GC()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Forcing the garbage collector to run would always crash the runtime with an invalid heap pointer in this example.&lt;/p&gt;

&lt;h2 id=&#34;fixing-the-bug&#34;&gt;Fixing the Bug&lt;/h2&gt;

&lt;p&gt;This fix was nice and short. I swapped out the &lt;code&gt;*uint16&lt;/code&gt; for a uintptr which is designed to hold the memory address value as an integral value. Being an integral type and not a pointer, it doesn&amp;rsquo;t get treated as a pointer in the runtime. This enables us to pass around the Windows &lt;code&gt;Resource&lt;/code&gt; references all over the code and all the way down to the syscalls. Thankfully this fix was also backwards compatible with existing code due to type aliasing of the original &lt;code&gt;*uint16&lt;/code&gt; from &lt;code&gt;MAKEINTRESOURCE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the actual pull request, see &lt;a href=&#34;https://github.com/winlabs/gowin32/pull/38&#34;&gt;https://github.com/winlabs/gowin32/pull/38&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;retrospective&#34;&gt;Retrospective&lt;/h2&gt;

&lt;p&gt;It turns out that this bug was keeping us from upgrading to Go 1.4 on the binaries that were using gowin32. I wasn&amp;rsquo;t aware of this since I stumbled on the bug in my free time. Another engineer came to the same conclusion as to what was wrong but arrived at the answer in a different way. In retrospect, I would have solved this faster had I actually looked for the JIRA ticket; but it was a nice exercise in debugging and I learned a lot more about Go internals.&lt;/p&gt;</description>
        </item>
      
    
      
        <item>
          <title>How I Saved Money with Static Site Generation</title>
          <link>https://erdaniels.com/2015/05/new-site/</link>
          <pubDate>Mon, 25 May 2015 18:53:32 EDT</pubDate>
          <author>Eric Daniels</author>
          <guid>https://erdaniels.com/2015/05/new-site/</guid>
          <description>&lt;p&gt;I&amp;rsquo;ve had the same blog running on WordPress for years. My hosting provider has also been the same for a while (&lt;a href=&#34;https://asmallorange.com/&#34;&gt;A Small Orange Hosting&lt;/a&gt;). While both are great solutions for getting a blog up and running, I am trying to optimize for costs in all aspects of life. First it was my phone bill, and then my gym which both save me about $150 a month. Now it is this site&amp;rsquo;s turn. I decided to do this over this weekend because my domain was up for renewal.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;wordpress-hugo&#34;&gt;WordPress -&amp;gt; Hugo&lt;/h2&gt;

&lt;p&gt;For a while I knew I wanted a static site but I didn&amp;rsquo;t know what solution I wanted to choose. I ended up going with &lt;a href=&#34;https://gohugo.io&#34;&gt;hugo&lt;/a&gt; since I&amp;rsquo;ve been working with go lately. The fact that it&amp;rsquo;s in go doesn&amp;rsquo;t mean much to me since I am not working on hugo; I&amp;rsquo;m just using it. It&amp;rsquo;s a simple framework that lets me do the only thing I need to do, get blog posts up quickly. Furthermore, it&amp;rsquo;s static. I&amp;rsquo;ve never had any kind of content on my site that needs to be loaded dynamically. Getting hugo set up was painless; getting a theme customized to my liking took a little longer but was still straightforward.&lt;/p&gt;

&lt;h2 id=&#34;aso-aws&#34;&gt;ASO -&amp;gt; AWS&lt;/h2&gt;

&lt;p&gt;ASO wasn&amp;rsquo;t really costing me much money a year but next year it would have cost me about $36 to run my simple site. I decided to get a free tier subscription on AWS since this would give me a whole year for free. A t2.micro is all I need for a site like this. It gets very few hits and needs barely any CPU power to function. After this year, I will invest some time into spot instances and see if a t1.micro will suit the site.&lt;/p&gt;

&lt;h2 id=&#34;http-https-http-2&#34;&gt;HTTP -&amp;gt; HTTPS &amp;amp; HTTP/2&lt;/h2&gt;

&lt;p&gt;This part has nothing to do with saving money and more with being an early adopter. I heard about &lt;a href=&#34;https://github.com/h2o/h2o&#34;&gt;H2O&lt;/a&gt; on Hacker News and I recalled it having HTTP/2 support. I decided to give it a go and it was a piece of cake to get the server up and running with a new SSL cert and serving HTTP/2 if clients ask for it. This also allowed me to get an A+ on the &lt;a href=&#34;https://www.ssllabs.com/ssltest/analyze.html?d=erdaniels.com&#34;&gt;Qualys SSL Server Test&lt;/a&gt;. The site doesn&amp;rsquo;t need to be secure but it&amp;rsquo;s nice to be secure by default.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This was a pretty simple move that will save me (excluding SSL) about $7-9 on hosting my site. I could have also chosen to host the site on GitHub Pages or on some other free hosting but this was a nice way to try some new software out.&lt;/p&gt;

&lt;p&gt;If you want to see the configuration of this site and the code running it, check out the repo at &lt;a href=&#34;https://github.com/edaniels/erdanielsdotcom-config&#34;&gt;https://github.com/edaniels/erdanielsdotcom-config&lt;/a&gt;&lt;/p&gt;</description>
        </item>
      
    
      
        <item>
          <title>Finding the device name of the root partition</title>
          <link>https://erdaniels.com/2015/01/finding-the-device-name-of-the-root-partition/</link>
          <pubDate>Thu, 22 Jan 2015 18:21:31 &#43;0000</pubDate>
          <author>Eric Daniels</author>
          <guid>https://erdaniels.com/2015/01/finding-the-device-name-of-the-root-partition/</guid>
          <description>&lt;p&gt;I thought this could be useful for someone trying to figure out the device name that a certain directory belongs to. In this example I am using /&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ROOT_PART=$(echo /dev/$(lsblk -P | grep -i &amp;quot;mountpoint=\&amp;quot;/\&amp;quot;&amp;quot; | awk &#39;{print $1}&#39; | cut -d &amp;quot;=&amp;quot; -f2 | sed -e &#39;s/^&amp;quot;//&#39; -e &#39;s/&amp;quot;$//&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If lsblk isn&amp;rsquo;t available for some reason you can also use df and awk:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ROOT_PART=$(df / | awk &#39;/^\/dev/ {print $1}&#39;)
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
      
    
      
        <item>
          <title>Raspberry Pi WiFi Setup</title>
          <link>https://erdaniels.com/2014/09/raspberry-pi-wifi-setup/</link>
          <pubDate>Thu, 18 Sep 2014 04:18:47 &#43;0000</pubDate>
          <author>Eric Daniels</author>
          <guid>https://erdaniels.com/2014/09/raspberry-pi-wifi-setup/</guid>
          <description>&lt;p&gt;I just recently ordered a Raspberry Pi Model B+ (yay!) and ordered an Edimax EW-7811Un WiFi dongle to go with it. Here&amp;rsquo;s how to set it up on Raspbian.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Make your &lt;code&gt;/etc/network/interfaces&lt;/code&gt; look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;auto lo

iface lo inet loopback
iface eth0 inet dhcp

allow-hotplug wlan0
iface wlan0 inet manual
wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf
iface default inet dhcp
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make your &lt;code&gt;/etc/wpa_supplicant/wpa_supplicant.conf&lt;/code&gt; look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1

network={
ssid=&amp;quot;whyfi&amp;quot;
psk=&amp;quot;yourpassword&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;sudo ifdown wlan0&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;sudo ifup wlan&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This assumes everything will work for you the way it did for me. My network is a WPA2-Personal network and only setting said and psk with wpa_supplicant did the job.&lt;/p&gt;</description>
        </item>
      
    
      
        <item>
          <title>Convert YAML files to JSON in a directory</title>
          <link>https://erdaniels.com/2014/08/convert-yaml-files-to-json-in-a-directory/</link>
          <pubDate>Mon, 18 Aug 2014 20:19:39 &#43;0000</pubDate>
          <author>Eric Daniels</author>
          <guid>https://erdaniels.com/2014/08/convert-yaml-files-to-json-in-a-directory/</guid>
          <description>&lt;p&gt;There is probably a much better way to do this but I got very excited having this all come together. This &amp;ldquo;one liner&amp;rdquo; requires the Perl modules JSON::XS and Catmandu.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find dir/subdir -name &amp;quot;*.yml&amp;quot; -execdir sh -c &#39;catmandu convert YAML to JSON &amp;lt; {} | json_xs &amp;gt; `basename {} .yml`.json&#39; \;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is what the script does:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Find all yml files and convert them into their JSON equivalents.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pipe the output into json_xs to prettify the JSON.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Output the prettified JSON to the same file but with a json extension.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
        </item>
      
    
      
        <item>
          <title>Re: Apples SSL/TLS bug</title>
          <link>https://erdaniels.com/2014/02/re-apples-ssltls-bug/</link>
          <pubDate>Sun, 23 Feb 2014 03:22:32 &#43;0000</pubDate>
          <author>Eric Daniels</author>
          <guid>https://erdaniels.com/2014/02/re-apples-ssltls-bug/</guid>
          <description>&lt;p&gt;So it looks like a user on  Hacker News found a bug in Apple&amp;rsquo;s SSL Key Exchange code. It was a classic bug caused by what seems like a copy and paste error. I&amp;rsquo;m writing this note here for myself and others that may stumble across this article: Use -Weverything (clang) if you are compiling critical code and don&amp;rsquo;t want to miss anything. -wall is a legacy option that covers more popular warnings but not nearly everything. For gcc users there is -Wall -Wextra . There isn&amp;rsquo;t a CVE as of yet.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Switching Hosts and Transferring Domain</title>
          <link>https://erdaniels.com/2014/02/switching-hosts-and-transferring-domain/</link>
          <pubDate>Wed, 05 Feb 2014 16:03:09 &#43;0000</pubDate>
          <author>Eric Daniels</author>
          <guid>https://erdaniels.com/2014/02/switching-hosts-and-transferring-domain/</guid>
          <description>&lt;p&gt;Although I loved HostGator&amp;rsquo;s service over the past few years, they&amp;rsquo;ve been charging way too much for me to host such a simple website. I paid around $90 a year with them and decided to look elsewhere for good, cheap service. After researching shared hosting providers for about two days I found out about A Small Orange. They aren&amp;rsquo;t a particularly mainstream provider but they gained enough popularity to be bought by EIG, Inc. Thankfully EIG lets them work independently and run their own company. ASO has a reputation for not hiding anything about what you&amp;rsquo;re paying for. They tell you exactly how much bandwidth you can use a month and how much storage you actually have. I went with their Tiny plan (2 GB bandwidth, 250 MB storage) and so far it has been great. An unintended result of transferring to them is that my site is much faster now. This may be due to their SSD storage or less load on the shared hosting servers. Best of all, I&amp;rsquo;m paying $35 a year now.&lt;/p&gt;

&lt;p&gt;In terms of my domain, I finally learned my lesson that you shouldn&amp;rsquo;t keep your domain and hosting all with the same provider. Most domain registrars tend to have mediocre shared hosting. Because of this I am transferring my domain to NameCheap. They had a transfer special today where you can get about half off of a transfer. This will save me about $5 a year on my domain compared to HostGator. The transfer hasn&amp;rsquo;t completed yet but I don&amp;rsquo;t think I will run into any issues.&lt;/p&gt;

&lt;p&gt;As a side note, CloudFlare is amazing! It is free and fast and if you&amp;rsquo;re running a blog I would definitely recommend it. My site loads in about 1.7 seconds with CloudFlare turned on to aggressive settings.&lt;/p&gt;</description>
        </item>
      
    
      
        <item>
          <title>Combining Asynchronous &amp; Multi-Threaded Programmming</title>
          <link>https://erdaniels.com/2013/06/combining-asynchronous-multi-threaded-programmming/</link>
          <pubDate>Sun, 16 Jun 2013 21:35:22 &#43;0000</pubDate>
          <author>Eric Daniels</author>
          <guid>https://erdaniels.com/2013/06/combining-asynchronous-multi-threaded-programmming/</guid>
          <description>&lt;p&gt;Over the past week I have had to develop a networking architecture that can handle multiple clients and quickly transmit received data to a specified location. The following is a description of some high level approaches of how the architecture could be implemented.

A naive approach to making a server accomplish this is to use a new process for each client connection. This is very easy to do but does not scale well at all as connections increase. With a large amount of processes you will start to waste time with context switching.&lt;/p&gt;

&lt;p&gt;The next approach which is not as bad is to spawn a new thread for each connection. Given the same amount of connections that the process approach received, you will incur less of a hit during context switching due to being able to keep the same virtual memory space. But an increase in threads implies an increase in stack size which is limited to a certain size depending on your system. Another cautionary note for Linux users is that if you run out of VM space, this will cause Linux to start killing random processes which could in turn kill your one process that spawned many threads.&lt;/p&gt;

&lt;p&gt;For threads and processes alike, spawning them requires significant computational time.&lt;/p&gt;

&lt;p&gt;I see this next approach as an ideal solution but I am definitely open to criticism. For every connection we received we can place it in a &lt;a href=&#34;http://linux.die.net/man/3/poll&#34;&gt;poll&lt;/a&gt; object instance. We can now poll inside a single thread and when any connection is up for being acted on, we can place a request in a service queue. This service queue would be serviced by a set amount of workers in a thread pool. The act of placing a request for service is our asynchronous action and the multi-threaded aspect is acting on these requests with multiple threads. An advantage here is that we create our threads ahead of time and keep reusing them. Also, if we set the size of the thread pool relative to the amount of cores on the computer, we MAY be able to get the most use out of our program. This is more of a parameter that varies based on the use case and system.&lt;/p&gt;

&lt;p&gt;I suppose you could have a single threaded event loop that still checks for connections that need to be serviced but it puts those requests on the same event loop and processes them as it sees fit. This doesn&amp;rsquo;t seem very scalable but nginx and node.js have had a lot of success (as have I when using node.js).&lt;/p&gt;</description>
        </item>
      
    
      
        <item>
          <title>Adobe Please</title>
          <link>https://erdaniels.com/2013/05/adobe-please/</link>
          <pubDate>Mon, 13 May 2013 18:34:06 &#43;0000</pubDate>
          <author>Eric Daniels</author>
          <guid>https://erdaniels.com/2013/05/adobe-please/</guid>
          <description>&lt;p&gt;Adobe could you please publish a full, lengthy, boring documentation of RTMP so we can stop reverse engineering it and using magic numbers?&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Checking if a string has all unique characters</title>
          <link>https://erdaniels.com/2012/10/checking-if-a-string-has-all-unique-characters/</link>
          <pubDate>Wed, 24 Oct 2012 19:56:41 &#43;0000</pubDate>
          <author>Eric Daniels</author>
          <guid>https://erdaniels.com/2012/10/checking-if-a-string-has-all-unique-characters/</guid>
          <description>&lt;p&gt;That awkward moment when you realized you forgot so much of the python you learned.&lt;/p&gt;

&lt;p&gt;I would like this to be the start of a series where I solve commonly asked programming questions in C++ and then in Python. It is extremely useful to be able to solve the same problem in two different types of languages. For me, it helps me build a better understanding of both languages and shows where one language might be favorable over another.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get started.

First let us assume that string is to be represented in ASCII. Therefore there are 256 choices that a character can be in the string.&lt;/p&gt;

&lt;p&gt;If we were to count the occurrences of every character, we would be able to decide whether the string is unique.&lt;/p&gt;

&lt;p&gt;Now the solution comes pretty simply:&lt;/p&gt;

&lt;h2 id=&#34;c&#34;&gt;C++&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;bool isUnique(string input) {
     int occurrences[256] = {0};
     for (int i = 0; i &amp;lt; input.length(); ++i)
          if ( ++occurrences[input[i]] &amp;gt; 1 )
               return false;
     return true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;python-3&#34;&gt;Python 3&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
def isUnique(input):

     occurrences = [0 for i in range(256)]

     for character in input:
          occurrences[ord(character)] += 1
          if occurrences[ord(character)] &amp;gt; 1:
               return False
     return True

if __name__ == &#39;__main__&#39;:
     choice = input(&amp;quot;Enter in a string to see if it has all unique characters: &amp;quot;)
     if isUnique(choice):
          print(&#39;True&#39;)
     else:
          print(&#39;False&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I prefer the C++ solution here because we don&amp;rsquo;t need to use any function to get the ASCII value of a character like we do in python with ord(). We also have the benefit here of the prefix increment operator in C++ which lets us shorten the code.&lt;/p&gt;</description>
        </item>
      
    
      
        <item>
          <title>C# 5.0 - Async and Await</title>
          <link>https://erdaniels.com/2012/10/c-5-0-async-and-await/</link>
          <pubDate>Tue, 16 Oct 2012 00:05:57 &#43;0000</pubDate>
          <author>Eric Daniels</author>
          <guid>https://erdaniels.com/2012/10/c-5-0-async-and-await/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/hh191443.aspx&#34;&gt;Asynchronous Programming with Async and Await (C# and Visual Basic)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I haven&amp;rsquo;t really used C# in a while due to school and mainly just not having a need to use it for anything new as of yet. But one thing I can say is that typical asynchronous programming introduces obscurity and complexity into your code that may confuse someone not yet intimate with the language. After giving this a read through, it look as if you can create a program that almost looks synchronous. Not having to worry about threading is a huge plus. The only thing someone has to do now to program this way is to get their head around the async and await keywords.

For asnyc methods we just need to specify a Task or Taskand that is essentially all that is needed for asynchronous to kick in. You only want to use Task when your method does not actually return anything; this is useful if we want a non-blocking way of doing work in the background so we can allow our caller to do work and then &lt;strong&gt;await &lt;/strong&gt;for the &lt;strong&gt;async &lt;/strong&gt;method to finish.  Otherwise we just specify a TResult (string, int, etc.) and this will guarantee that the caller calling our &lt;strong&gt;async&lt;/strong&gt; method will receive a TResult in return.&lt;/p&gt;

&lt;p&gt;On an unrelated note, I have an interview at Microsoft in the near future for an internship position as an SDET (Software Development Engineer in Test). I&amp;rsquo;m unbelievably excited to visit Washington for the first time, visit the Microsoft campus, and just see how they interview. Maybe I will even get a chance to visit Valve on my off time!&lt;/p&gt;</description>
        </item>
      
    
      
        <item>
          <title>Web Development!</title>
          <link>https://erdaniels.com/2012/06/web-development/</link>
          <pubDate>Thu, 07 Jun 2012 14:14:23 &#43;0000</pubDate>
          <author>Eric Daniels</author>
          <guid>https://erdaniels.com/2012/06/web-development/</guid>
          <description>&lt;p&gt;I landed a job at PATLive here in Tallahassee and I am learning so much about JavaScript and PHP. I never knew how useful jQuery could be and that JavaScript is actually used server side (i.e. Node). This job is also helping me learn a lot about telephony systems like PBX, ACD, and sipX (ezuce too). Haven&amp;rsquo;t posted in months (maybe a year?) but I plan on doing this soon maybe with tips or small projects!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>New Projects</title>
          <link>https://erdaniels.com/2011/07/new-projects/</link>
          <pubDate>Tue, 26 Jul 2011 18:02:12 &#43;0000</pubDate>
          <author>Eric Daniels</author>
          <guid>https://erdaniels.com/2011/07/new-projects/</guid>
          <description>&lt;p&gt;So I&amp;rsquo;ve been contracted for two new projects which is why I haven&amp;rsquo;t posted any new PE solutions lately. What I love about being contracted is that I get to choose my language. For one of the projects, I am using Python because performance is not an issue and it reduces the amount of lines I code over C++/C#. For the other project I am using C# because it involves automating some excel processes and the .NET framework is a perfect tool for that. Python can also use interop tools but the functionality feels more native in C# as opposed to Python and especially C++ (TCHAR and Unicode&amp;hellip;).&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Problem 20 (a.k.a. Who knew how simple python could be?)</title>
          <link>https://erdaniels.com/2011/07/problem-20-a-k-a-who-knew-how-simple-python-could-be/</link>
          <pubDate>Thu, 07 Jul 2011 20:07:02 &#43;0000</pubDate>
          <author>Eric Daniels</author>
          <guid>https://erdaniels.com/2011/07/problem-20-a-k-a-who-knew-how-simple-python-could-be/</guid>
          <description>&lt;blockquote&gt;
n! means n x (n - 1)  ...  3 x 2 x 1

For example, 10! = 10 x 9  ...  3 x 2 x 1 = 3628800,
and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.

Find the sum of the digits in the number 100!
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;This literally took a minute to write-up in python:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import math

def problem_20(target):

	factorial_num = str(math.factorial(target))

	sum = 0

	for number in factorial_num:
		sum += int(number)
	
	return sum
	
print(problem_20(100))
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
      
    
      
        <item>
          <title>Python</title>
          <link>https://erdaniels.com/2011/07/python/</link>
          <pubDate>Thu, 07 Jul 2011 16:53:36 &#43;0000</pubDate>
          <author>Eric Daniels</author>
          <guid>https://erdaniels.com/2011/07/python/</guid>
          <description>&lt;p&gt;supports large integers out of the box. Looks like its time to learn a new language to solve these ProjectEuler problems. As much as I love C++, the memory management required in these problems becomes a heavy burden. Also my BigInt class is very slow since I haven&amp;rsquo;t implemented fast arithmetic methods. So why not use something that is already good code!&lt;/p&gt;
</description>
        </item>
      
    
  </channel>
</rss>